import cv2
import os
import time
from datetime import datetime


def saving_on_desktop():
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É
    desktop = os.path.join(os.path.expanduser('~'), 'Desktop')

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–Ω–∏–º–∫–æ–≤ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
    save_folder = os.path.join(desktop, 'Camera_Shots')
    os.makedirs(save_folder, exist_ok=True)
    return save_folder

def connection_of_cameras():
       # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–∞–º–µ—Ä–µ (–≥–ª–∞–∑ ‚Ññ0)
    camera = cv2.VideoCapture(0)
    return camera

def photo_size(camera, dlina, visota):
        #—Ä–∞–∑–º–µ—Ä
    camera.set(cv2.CAP_PROP_FRAME_WIDTH,dlina)
    camera.set(cv2.CAP_PROP_FRAME_HEIGHT,visota)
    
def check_cameras(camera):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ª–∏ –∫–∞–º–µ—Ä–∞
    if 0 == camera.isOpened():
        print("–û–π! –ö–∞–º–µ—Ä–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ üò¢")
        exit()
    print("–ö–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–∂–º–∏ 'Q', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏")

def capture_cameras(camera):
            N = 0
                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä
            frame=[]
            frame=camera.read()
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –≤—ã—Ö–æ–¥–∏–º
            if 0 == frame[0]:
                print("–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä...")
                N = 1
            return frame, N
def photo_output(frame):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–¥—Ä
            cv2.imshow("Live Camera", frame[1])

def saving_photo(frame,save_folder):   
            if frame[0]:
                    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
                timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
                filename = f"photo_{timestamp}.jpg"
                filepath = os.path.join(save_folder, filename)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                cv2.imwrite(filepath, frame[1])
                print(f"‚úÖ –°–Ω–∏–º–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫")
            return timestamp
def closing_the_screen(camera):           
                   # –£–±–∏—Ä–∞–µ–º –∑–∞ —Å–æ–±–æ–πq
                camera.release()
                cv2.destroyAllWindows()
                
def end(camera):
        # –£–±–∏—Ä–∞–µ–º –∑–∞ —Å–æ–±–æ–πq
    camera.release()
    cv2.destroyAllWindows()
    

def dict_1(dict1, N, frame, timestamp,result):
    #dict1 = {time.time():{frame,time}}
    dict2 = {N:[frame, timestamp, result]}
    dict1.append(dict2)
    return dict1
    
def start_vidio(dict1, camera, save_folder):
    N = 1
    result = 1#kik
    while N != 0:

        frame, N = capture_cameras(camera)
        photo_output(frame)
        timestamp = saving_photo(frame, save_folder)
        dict_1(dict1, N, frame, timestamp, result)
            # –í—ã—Ö–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Q
        if cv2.waitKey(1) ==ord('q')& 0xFF == ord('q'):  
            N=0
            closing_the_screen(camera)
            end(camera)
            return dict1
        N+=1
        time.sleep(3)
        

def main():
    dict1=[]
    save_folder = saving_on_desktop()
    camera = connection_of_cameras()
    photo_size(camera,1920,1080)
    check_cameras(camera)
    dict1 = start_vidio(dict1, camera, save_folder)
    end(camera)


main()
